name: Release Node.js Package

on:
  push:
    tags:
      - 'node-v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: node/package-lock.json
    
    - name: Install dependencies
      working-directory: ./node
      run: npm ci
    
    - name: Run tests
      working-directory: ./node
      run: npm test
      continue-on-error: true  # Since there might not be tests yet
    
    - name: Check package can be packaged
      working-directory: ./node
      run: npm pack --dry-run

  publish-npm:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: node/package-lock.json
    
    - name: Install dependencies
      working-directory: ./node
      run: npm ci
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/node-v}" >> $GITHUB_OUTPUT
    
    - name: Update package version
      working-directory: ./node
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        TARGET_VERSION="${{ steps.get_version.outputs.VERSION }}"
        if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
          npm version $TARGET_VERSION --no-git-tag-version
        else
          echo "Version already matches: $TARGET_VERSION"
        fi
    
    - name: Publish to npm
      working-directory: ./node
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-binaries:
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            asset_name: ai-firewall-node-linux-amd64.tar.gz
          - os: macos-latest
            asset_name: ai-firewall-node-darwin-amd64.tar.gz
          - os: windows-latest
            asset_name: ai-firewall-node-windows-amd64.zip
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: node/package-lock.json
    
    - name: Install dependencies
      working-directory: ./node
      run: npm ci --only=production
    
    - name: Create package directory
      run: mkdir -p package/ai-firewall-node
    
    - name: Copy files (Unix)
      if: runner.os != 'Windows'
      run: |
        cp -r node/src package/ai-firewall-node/
        cp node/package.json package/ai-firewall-node/
        cp node/package-lock.json package/ai-firewall-node/
        cp -r node/node_modules package/ai-firewall-node/
        cp superagent.yaml package/ai-firewall-node/
        chmod +x package/ai-firewall-node/src/cli.js
    
    - name: Copy files (Windows)
      if: runner.os == 'Windows'
      run: |
        xcopy /E /I node\src package\ai-firewall-node\src
        copy node\package.json package\ai-firewall-node\
        copy node\package-lock.json package\ai-firewall-node\
        xcopy /E /I node\node_modules package\ai-firewall-node\node_modules
        copy superagent.yaml package\ai-firewall-node\
    
    - name: Create tarball (Unix)
      if: runner.os != 'Windows'
      run: |
        cd package
        tar -czf ${{ matrix.asset_name }} ai-firewall-node/
    
    - name: Create zip (Windows)
      if: runner.os == 'Windows'
      run: |
        cd package
        Compress-Archive -Path ai-firewall-node -DestinationPath ${{ matrix.asset_name }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: package/${{ matrix.asset_name }}

  publish-github-package:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://npm.pkg.github.com'
        cache: 'npm'
        cache-dependency-path: node/package-lock.json
    
    - name: Install dependencies
      working-directory: ./node
      run: npm ci
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/node-v}" >> $GITHUB_OUTPUT
    
    - name: Update package version for GitHub
      working-directory: ./node
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        TARGET_VERSION="${{ steps.get_version.outputs.VERSION }}"
        if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
          npm version $TARGET_VERSION --no-git-tag-version
        else
          echo "Version already matches: $TARGET_VERSION"
        fi
        # Update package name for GitHub registry
        sed -i 's/"name": "ai-firewall"/"name": "@${{ github.repository_owner }}\/ai-firewall"/' package.json
    
    - name: Publish to GitHub Packages
      working-directory: ./node
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/node-v}" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.node
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/node:${{ steps.get_version.outputs.VERSION }}
          ghcr.io/${{ github.repository }}/node:latest

  create-release:
    needs: [publish-npm, build-binaries, publish-github-package, publish-docker]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/node-v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.tar.gz
          **/*.zip
        generate_release_notes: true
        body: |
          ## Node.js Package Release
          
          ### Installation Options
          
          **Via npm:**
          ```bash
          npm install -g ai-firewall
          ```
          
          **Via GitHub Packages:**
          ```bash
          npm install -g @${{ github.repository_owner }}/ai-firewall
          ```
          
          **Via Docker:**
          ```bash
          docker pull ghcr.io/${{ github.repository }}/node:${{ steps.get_version.outputs.VERSION }}
          ```
          
          **Via binary download:**
          Download the appropriate binary for your platform and extract it.
          
          ### Usage
          ```bash
          ai-firewall start --port 8080 --config superagent.yaml
          ```
          
          ### What's Changed
          See the auto-generated release notes below.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}